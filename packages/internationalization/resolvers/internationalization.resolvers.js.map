{"version":3,"sources":["resolvers/internationalization.resolvers.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,0CAA0D;AAC1D,6CAAkD;AAGlD,IAAa,6BAA6B,GAA1C;IAII,YAA6B,2BAAwD;QAAxD,gCAA2B,GAA3B,2BAA2B,CAA6B;IACrF,CAAC;IAGM,UAAU;QACb,OAAO,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC;IACvD,CAAC;IAQM,SAAS,CAAC,OAAO,EAAE,IAAwC;QAC9D,OAAO,IAAI,CAAC,2BAA2B,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACnF,CAAC;CACJ,CAAA;AAbG;IADC,eAAK,EAAE;;;;+DAGP;AAQD;IADC,eAAK,EAAE;;;;8DAGP;AApBQ,6BAA6B;IADzC,kBAAQ,EAAE;qCAKmD,sCAA2B;GAJ5E,6BAA6B,CAqBzC;AArBY,sEAA6B","file":"internationalization.resolvers.js","sourcesContent":["import { InternationalizationService } from \"../services\";\nimport { Query, Resolver } from \"@nestjs/graphql\";\n\n@Resolver()\nexport class InternationalizationResolvers {\n    /**\n     * @param { InternationalizationService } internationalizationService\n     */\n    constructor(private readonly internationalizationService: InternationalizationService) {\n    }\n\n    @Query()\n    public getPhrases(): any {\n        return this.internationalizationService.getPhrases;\n    }\n\n    /**\n     * @param context\n     * @param args\n     * @returns {string}\n     */\n    @Query()\n    public translate(context, args: { phrase: string, variables: any }): string {\n        return this.internationalizationService.translate(args.phrase, args.variables);\n    }\n}\n"]}