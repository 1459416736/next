{"version":3,"sources":["builders/rdbms-schema.builder.ts"],"names":[],"mappings":";;AACA,kFAAgG;AAEhG,wBAAgC,SAAQ,uCAAa;IAMjD,IAAc,qBAAqB;QAC/B,OAAO,IAAI,CAAC,SAAS;aAChB,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,SAAS,KAAK,oBAAoB,CAAC,CAAC;IAC/F,CAAC;IAKM,YAAY,CAAC,SAAgC;QAChD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;CACJ;AAjBD,gDAiBC","file":"rdbms-schema.builder.js","sourcesContent":["import { EntityMetadata } from \"typeorm/metadata/EntityMetadata\";\nimport { RdbmsSchemaBuilder as SchemaBuilder } from \"typeorm/schema-builder/RdbmsSchemaBuilder\";\n\nexport class RdbmsSchemaBuilder extends SchemaBuilder {\n    protected metadatas: Array<EntityMetadata>;\n\n    /**\n     * @returns { Array<EntityMetadata> }\n     */\n    protected get entityToSyncMetadatas(): Array<EntityMetadata> {\n        return this.metadatas\n            .filter(metadata => !metadata.skipSync && metadata.tableType !== \"single-table-child\");\n    }\n\n    /**\n     * @param { EntityMetadata[] } metadatas\n     */\n    public setMetadatas(metadatas: Array<EntityMetadata>) {\n        this.metadatas = metadatas;\n    }\n}\n"]}