{"version":3,"sources":["utilities/import-classes-from-directories.ts"],"names":[],"mappings":";;AAAA,qDAAiD;AAQjD,sCAAgD,WAA0B,EAAE,OAAO,GAAG,CAAE,KAAK,EAAE,KAAK,CAAC;IAOjG,yBAA4B,QAAa,EAAE,SAAmB;QAC1D,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;YAChC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC5B;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAChC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,eAAe,CAAI,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;SAClE;aAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YACrC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,eAAe,CAAI,QAAQ,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;SACtF;QAED,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;QACjD,OAAO,OAAO,CAAC,MAAM,CAAC,8BAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,8BAAa,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7F,CAAC,EAAE,EAAmB,CAAC,CAAC;IAExB,MAAM,IAAI,GAAG,QAAQ;SAChB,MAAM,CAAC,IAAI,CAAC,EAAE;QACX,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAElE,OAAO,OAAO,CAAC,OAAO,CAAC,8BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,YAAY,KAAK,OAAO,CAAC;IAC/F,CAAC,CAAC;SACD,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,8BAAa,CAAC,IAAI,CAAC,8BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAM,CAAC,CAAC;IAE3E,OAAO,eAAe,CAAI,IAAI,EAAE,EAAE,CAAC,CAAC;AACxC,CAAC;AAhCD,oEAgCC","file":"import-classes-from-directories.js","sourcesContent":["import { PlatformTools } from \"./platform-tools\";\n\n/**\n * @param { Array<string> } directories\n * @param { Array<string> } formats\n *\n * @returns { Array<T> }\n */\nexport function importClassesFromDirectories<T>(directories: Array<string>, formats = [ \".js\", \".ts\"]): Array<T> {\n    /**\n     * @param exported\n     * @param { Array<T> } allLoaded\n     *\n     * @returns { Array<T> }\n     */\n    function loadFileClasses<T>(exported: any, allLoaded: Array<T>) {\n        if (typeof exported === \"function\") {\n            allLoaded.push(exported);\n        } else if (Array.isArray(exported)) {\n            exported.forEach((i: any) => loadFileClasses<T>(i, allLoaded));\n        } else if (typeof exported === \"object\") {\n            Object.keys(exported).forEach(key => loadFileClasses<T>(exported[key], allLoaded));\n        }\n\n        return allLoaded;\n    }\n\n    const allFiles = directories.reduce((allDirs, dir) => {\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormalize(dir)));\n    }, [] as Array<string>);\n\n    const dirs = allFiles\n        .filter(file => {\n            const dtsExtension = file.substring(file.length - 5, file.length);\n\n            return formats.indexOf(PlatformTools.pathExtname(file)) !== -1 && dtsExtension !== \".d.ts\";\n        })\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)) as T);\n\n    return loadFileClasses<T>(dirs, []);\n}\n"]}