{"version":3,"sources":["decorators/addon.decorator.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAE1B,oFAA2E;AAC3E,4CAA8C;AAE9C,eAAsB,GAWrB;IACG,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;IAEtE,OAAO,CAAC,MAAW,EAAE,EAAE;QACnB,KAAK,MAAM,QAAQ,IAAI,GAAG,EAAE;YACxB,IAAI,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBAC9B,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;aAC3D;SACJ;QACD,OAAO,CAAC,cAAc,CAAC,0BAAc,EAAE,mCAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACxE,CAAC,CAAC;AACN,CAAC;AAtBD,sBAsBC","file":"addon.decorator.js","sourcesContent":["import \"reflect-metadata\";\nimport { Author } from \"../interfaces\";\nimport { InjectionType } from \"@notadd/core/constants/injection.constants\";\nimport { INJECTION_TYPE } from \"../constants\";\n\nexport function Addon(obj: {\n    authors?: Array<Author>,\n    description?: string,\n    exports?: Array<any>,\n    identification: string,\n    imports?: Array<any>,\n    components?: Array<any>,\n    controllers?: Array<any>,\n    modules?: Array<any>,\n    name: string,\n    version: string,\n}): ClassDecorator {\n    obj.modules = obj.imports && !obj.modules ? obj.imports : obj.modules;\n\n    return (target: any) => {\n        for (const property in obj) {\n            if (obj.hasOwnProperty(property)) {\n                Reflect.defineMetadata(property, obj[property], target);\n            }\n        }\n        Reflect.defineMetadata(INJECTION_TYPE, InjectionType.Addon, target);\n    };\n}\n"]}