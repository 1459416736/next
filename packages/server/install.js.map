{"version":3,"sources":["install.ts"],"names":[],"mappings":"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","file":"install.js","sourcesContent":["import \"reflect-metadata\";\nimport * as clc from \"cli-color\";\nimport * as writeJsonFile from \"write-json-file\";\nimport { createConnection } from \"typeorm\";\nimport { createHash } from \"crypto\";\nimport { join } from \"path\";\nimport { execSync } from \"child_process\";\nimport { prompt } from \"inquirer\";\nimport { User } from \"@notadd/user/model/user.entity\";\n\nasync function install() {\n    console.log(`\n                 _            _     _\n     _ __   ___ | |_ __ _  __| | __| |\n    | \"_ \\\\ / _ \\\\| __/ _\\` |/ _\\` |/ _\\` |\n    | | | | (_) | || (_| | (_| | (_| |\n    |_| |_|\\\\___/ \\\\__\\\\__,_|\\\\__,_|\\\\__,_|\n\n    `);\n    console.log(clc.blue(\"Please answer the following questions carefully:\"));\n\n    let result;\n    result = await prompt([\n        {\n            type: \"list\",\n            message: \"Please select which database engine you want use:\",\n            name: \"engine\",\n            choices: [\n                {\n                    name: \"Postgres\",\n                    value: \"postgres\",\n                },\n                {\n                    name: \"MySQL\",\n                    value: \"mysql\",\n                },\n                {\n                    name: \"Sqlite\",\n                    value: \"sqlite\",\n                },\n            ],\n            default: 0,\n        },\n    ]);\n    const engine = result.engine;\n    switch (engine) {\n        case \"postgres\":\n        case \"mysql\":\n            result = await prompt([\n                {\n                    type: \"input\",\n                    message: \"Database Host:\",\n                    name: \"databaseHost\",\n                },\n                {\n                    type: \"input\",\n                    message: \"Database Port:\",\n                    name: \"databasePort\",\n                },\n                {\n                    type: \"input\",\n                    message: \"Database Username:\",\n                    name: \"databaseUsername\",\n                },\n                {\n                    type: \"input\",\n                    message: \"Database Password:\",\n                    name: \"databasePassword\",\n                },\n                {\n                    type: \"input\",\n                    message: \"Database Name:\",\n                    name: \"database\",\n                },\n                {\n                    type: \"input\",\n                    message: \"Administration Username:\",\n                    name: \"username\",\n                },\n                {\n                    type: \"input\",\n                    message: \"Administration Email:\",\n                    name: \"email\",\n                },\n                {\n                    type: \"input\",\n                    message: \"Administration Password:\",\n                    name: \"password\",\n                },\n            ]);\n            break;\n        default:\n            result = await prompt([\n                {\n                    type: \"input\",\n                    message: \"Administration Username:\",\n                    name: \"username\",\n                },\n                {\n                    type: \"input\",\n                    message: \"Administration Email:\",\n                    name: \"email\",\n                },\n                {\n                    type: \"input\",\n                    message: \"Administration Password:\",\n                    name: \"password\",\n                },\n            ]);\n            break;\n    }\n    let database = {};\n    switch (engine) {\n        case \"postgres\":\n        case \"mysql\":\n            database = {\n                type: engine,\n                host: result.databaseHost,\n                port: result.databasePort,\n                username: result.databaseUsername,\n                password: result.databasePassword,\n                database: result.database,\n                entities: [\n                    \"**/*.entity.js\",\n                ],\n                migrations: [\n                    \"**/*.migration.js\",\n                ],\n                logging: true,\n                migrationsRun: false,\n                synchronize: false,\n            };\n            break;\n        default:\n            database = {\n                type: engine,\n                database: \"./notadd.sqlite\",\n                entities: [\n                    \"**/*.entity.js\",\n                ],\n                migrations: [\n                    \"**/*.migration.js\",\n                ],\n                logging: true,\n                migrationsRun: false,\n                synchronize: false,\n            };\n            break;\n    }\n    writeJsonFile.sync(join(process.cwd(), \"configurations\", \"database.json\"), database, {\n        indent: 4,\n        sortKeys: true,\n    });\n    let wanted = \"\";\n    switch (engine) {\n        case \"mysql\":\n            wanted = \"mysql\";\n            break;\n        case \"sqlite\":\n            wanted = \"sqlite3\";\n            break;\n        default:\n            wanted = \"pg\";\n            break;\n    }\n\n    addPackageForDatabase(wanted);\n    await addAdministrationUser(result.username, result.email, result.password, database);\n\n    console.log(clc.blue(\"Notadd install successfully!\"));\n}\n\nfunction addPackageForDatabase(engine: string) {\n    console.log(clc.blue(`Install package for database engine ${engine}...`));\n\n    execSync(`yarn add ${engine} -W`, {\n        cwd: process.cwd(),\n        env: process.env,\n        stdio: [\"ignore\", process.stdout, process.stderr],\n    });\n\n    console.log(clc.blue(`Installed package ${engine}`));\n}\n\nasync function addAdministrationUser(username: string, email: string, password: string, database: any) {\n    const connection = await createConnection(database);\n    await connection.synchronize(false);\n    const repository = connection.getRepository(User);\n    const salt = createHash(\"sha256\").update(new Date().toString()).digest(\"hex\").slice(0, 10);\n    const organizations = [];\n    const passwordWithSalt = createHash(\"sha256\").update(password + salt).digest(\"hex\");\n    const user = repository.create({\n        userName: username,\n        password: passwordWithSalt,\n        salt,\n        status: true,\n        recycle: false,\n        organizations\n    });\n    await repository.save(user);\n    await connection.close();\n}\n\ninstall();\n"]}