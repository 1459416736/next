{"version":3,"sources":["microservices/grpc.microservice.ts"],"names":[],"mappings":"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","file":"grpc.microservice.js","sourcesContent":["import { CustomTransportStrategy, Server } from \"@nestjs/microservices\";\nimport { Observable, Observer } from \"rxjs\";\nimport { makeGrpcError } from \"../errors\";\nimport { GrpcServerConfig } from \"../interfaces\";\n\nexport class GrpcMicroservice extends Server implements CustomTransportStrategy {\n    private readonly server: any;\n\n    private readonly host: string;\n\n    private readonly port: number;\n\n    private readonly serviceName: string;\n\n    constructor(server: any, config: GrpcServerConfig) {\n        super();\n        this.server = server;\n        this.host = config.host;\n        this.port = config.port;\n        this.serviceName = config.serviceName;\n    }\n\n    listen(callback?: () => void) {\n        this.init();\n        this.server.start(`${this.host}:${this.port}`);\n        callback && callback();\n    }\n\n    close() {\n        this.server && this.server.forceShutdown();\n    }\n\n    private init(): void {\n        const delegates: any = this.getGRPCDelegates()\n            .map(d => {\n                return {\n                    ...d,\n                    rpc: this.wrapRpc(d.rpc),\n                };\n            })\n            .reduce((acc: { [index: string]: Function }, val: any) => {\n                acc[val.name] = val.rpc;\n\n                return acc;\n            }, {});\n\n        this.server[`add${this.serviceName}`](delegates);\n    }\n\n    private wrapRpc(delegate: (...args: Array<any>) => Promise<any>) {\n        return (...args: Array<any>) => {\n            const response$ = this.transformToObservable(\n                delegate(...args)\n            ) as Observable<any>;\n\n            return  Observable.create((observer: Observer<any>) => {\n                return response$.subscribe({\n                    next(value: any) {\n                        if (value && value.error && value instanceof Observable) {\n                            return observer.error(makeGrpcError((value as any).error));\n                        }\n                        observer.next(value);\n                    },\n                    error(error) {\n                        observer.error(makeGrpcError(error));\n                    },\n                    complete: observer.complete.bind(observer),\n                });\n            });\n        };\n    }\n\n    /**\n     * Returns any methods decorated with @MessagePattern({ rpc: \"rpcMethod\" })\n     * or @rpc.\n     */\n    private getGRPCDelegates() {\n        const handles = this.getHandlers();\n        const ret: Array<{ rpc: any; name: string }> = [];\n\n        Object.keys(handles).forEach(serializedPattern => {\n            if (serializedPattern !== \"undefined\") {\n                let pattern: { rpc?: string };\n\n                try {\n                    pattern = JSON.parse(serializedPattern);\n                } catch (error) {\n                    return;\n                }\n\n                if (pattern.rpc) {\n                    ret.push({ rpc: handles[serializedPattern], name: pattern.rpc });\n                }\n            }\n        });\n\n        return ret;\n    }\n}\n"]}